getaddrinfo translates domain names to ips. The port u pass depends on whether you are the client or server

int getaddrinfo(const char *node,          // e.g. "www.example.com" or IP
                const char *service,       // e.g. "http" or port number
                const struct addrinfo *hints,
                struct addrinfo **res);


A socket is an endpoint for communication over a network, it is defined by a 5 tuple:
<protocol, local IP, local port, remote IP, remote port>



to create a socket u call soket() and the libc (c std lib) calls the systems socket() on your behalf, the kernel then assigns a new socket descriptor(integer) and returns that to you.

| Layer        | What's happening                        |
| ------------ | --------------------------------------- |
| Your code    | `sockfd = socket(...)`                  |
| libc wrapper | Calls `syscall(SYS_socket, ...)`        |
| Kernel       | Allocates a `struct socket`, returns FD |
| You get      | `sockfd = 3` (for example)              |



when the kernel creates the struct socket, it also creates a struct file

// linux/include/net/sock.h
struct socket {
    socket_state          state;         // Socket state: connected, listening, etc.
    short                 type;          // SOCK_STREAM, SOCK_DGRAM, etc.
    unsigned long         flags;         // Flags like SOCK_NONBLOCK
    struct file          *file;          // Pointer to file object
    struct sock          *sk;            // Pointer to protocol-specific sock (TCP, UDP, etc.)
    const struct proto_ops *ops;         // Function table (connect, send, recv, etc.)
};


when using sendto(), a single call translates to a single packet (datagram). If you try to send more than the newtwork's MTU(Maximum Transmission Unit), the IP layer either fragments(bad performance) it or it fails

2. TCP: byte-stream ⇒ many segments ⇒ many packets
Stream semantics:
    You call send(fd, buf, len, 0), the kernel just appends those len bytes into the socket’s send buffer. No notion of your “message” size survives beyond the socket API. Two successive send() calls may be coalesced into one TCP segment, or one large send() may be split across multiple segments.

Segmentation & MSS:
    The kernel breaks your stream up into TCP segments, each up to the MSS (maximum segment size).
    MSS is typically MTU minus IP/TCP headers: on Ethernet, MSS ≈ 1500 − 20 − 20 = 1460 bytes.

When packets go on-the-wire:
    Nagle’s algorithm may delay small writes to coalesce them into fewer, larger segments.
    TCP_NODELAY disables Nagle so each send() can immediately turn into a segment (but still capped by MSS).
    Once a segment is formed, it’s handed to the IP layer, which wraps it in an IP packet, then to the NIC driver, which wraps it in an Ethernet frame.


3. So—where do “packets” come in?
At the API level you never see “packet boundaries” for TCP sockets. You just read/write bytes.

At the transport layer the kernel slices and dices your byte-stream into TCP segments or UDP datagrams.

At the network layer each segment/datagram becomes an IP packet.

At the link layer that IP packet becomes an Ethernet frame (or whatever your NIC uses).

